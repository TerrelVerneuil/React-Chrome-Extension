/*
 * ATTENTION: The "eval" devtool has been used (maybe by default in mode: "development").
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
/******/ (() => { // webpackBootstrap
/******/ 	var __webpack_modules__ = ({

/***/ "./background.js":
/*!***********************!*\
  !*** ./background.js ***!
  \***********************/
/***/ (() => {

eval("function _regeneratorRuntime() { \"use strict\"; /*! regenerator-runtime -- Copyright (c) 2014-present, Facebook, Inc. -- license (MIT): https://github.com/facebook/regenerator/blob/main/LICENSE */ _regeneratorRuntime = function _regeneratorRuntime() { return e; }; var t, e = {}, r = Object.prototype, n = r.hasOwnProperty, o = Object.defineProperty || function (t, e, r) { t[e] = r.value; }, i = \"function\" == typeof Symbol ? Symbol : {}, a = i.iterator || \"@@iterator\", c = i.asyncIterator || \"@@asyncIterator\", u = i.toStringTag || \"@@toStringTag\"; function define(t, e, r) { return Object.defineProperty(t, e, { value: r, enumerable: !0, configurable: !0, writable: !0 }), t[e]; } try { define({}, \"\"); } catch (t) { define = function define(t, e, r) { return t[e] = r; }; } function wrap(t, e, r, n) { var i = e && e.prototype instanceof Generator ? e : Generator, a = Object.create(i.prototype), c = new Context(n || []); return o(a, \"_invoke\", { value: makeInvokeMethod(t, r, c) }), a; } function tryCatch(t, e, r) { try { return { type: \"normal\", arg: t.call(e, r) }; } catch (t) { return { type: \"throw\", arg: t }; } } e.wrap = wrap; var h = \"suspendedStart\", l = \"suspendedYield\", f = \"executing\", s = \"completed\", y = {}; function Generator() {} function GeneratorFunction() {} function GeneratorFunctionPrototype() {} var p = {}; define(p, a, function () { return this; }); var d = Object.getPrototypeOf, v = d && d(d(values([]))); v && v !== r && n.call(v, a) && (p = v); var g = GeneratorFunctionPrototype.prototype = Generator.prototype = Object.create(p); function defineIteratorMethods(t) { [\"next\", \"throw\", \"return\"].forEach(function (e) { define(t, e, function (t) { return this._invoke(e, t); }); }); } function AsyncIterator(t, e) { function invoke(r, o, i, a) { var c = tryCatch(t[r], t, o); if (\"throw\" !== c.type) { var u = c.arg, h = u.value; return h && \"object\" == _typeof(h) && n.call(h, \"__await\") ? e.resolve(h.__await).then(function (t) { invoke(\"next\", t, i, a); }, function (t) { invoke(\"throw\", t, i, a); }) : e.resolve(h).then(function (t) { u.value = t, i(u); }, function (t) { return invoke(\"throw\", t, i, a); }); } a(c.arg); } var r; o(this, \"_invoke\", { value: function value(t, n) { function callInvokeWithMethodAndArg() { return new e(function (e, r) { invoke(t, n, e, r); }); } return r = r ? r.then(callInvokeWithMethodAndArg, callInvokeWithMethodAndArg) : callInvokeWithMethodAndArg(); } }); } function makeInvokeMethod(e, r, n) { var o = h; return function (i, a) { if (o === f) throw new Error(\"Generator is already running\"); if (o === s) { if (\"throw\" === i) throw a; return { value: t, done: !0 }; } for (n.method = i, n.arg = a;;) { var c = n.delegate; if (c) { var u = maybeInvokeDelegate(c, n); if (u) { if (u === y) continue; return u; } } if (\"next\" === n.method) n.sent = n._sent = n.arg;else if (\"throw\" === n.method) { if (o === h) throw o = s, n.arg; n.dispatchException(n.arg); } else \"return\" === n.method && n.abrupt(\"return\", n.arg); o = f; var p = tryCatch(e, r, n); if (\"normal\" === p.type) { if (o = n.done ? s : l, p.arg === y) continue; return { value: p.arg, done: n.done }; } \"throw\" === p.type && (o = s, n.method = \"throw\", n.arg = p.arg); } }; } function maybeInvokeDelegate(e, r) { var n = r.method, o = e.iterator[n]; if (o === t) return r.delegate = null, \"throw\" === n && e.iterator[\"return\"] && (r.method = \"return\", r.arg = t, maybeInvokeDelegate(e, r), \"throw\" === r.method) || \"return\" !== n && (r.method = \"throw\", r.arg = new TypeError(\"The iterator does not provide a '\" + n + \"' method\")), y; var i = tryCatch(o, e.iterator, r.arg); if (\"throw\" === i.type) return r.method = \"throw\", r.arg = i.arg, r.delegate = null, y; var a = i.arg; return a ? a.done ? (r[e.resultName] = a.value, r.next = e.nextLoc, \"return\" !== r.method && (r.method = \"next\", r.arg = t), r.delegate = null, y) : a : (r.method = \"throw\", r.arg = new TypeError(\"iterator result is not an object\"), r.delegate = null, y); } function pushTryEntry(t) { var e = { tryLoc: t[0] }; 1 in t && (e.catchLoc = t[1]), 2 in t && (e.finallyLoc = t[2], e.afterLoc = t[3]), this.tryEntries.push(e); } function resetTryEntry(t) { var e = t.completion || {}; e.type = \"normal\", delete e.arg, t.completion = e; } function Context(t) { this.tryEntries = [{ tryLoc: \"root\" }], t.forEach(pushTryEntry, this), this.reset(!0); } function values(e) { if (e || \"\" === e) { var r = e[a]; if (r) return r.call(e); if (\"function\" == typeof e.next) return e; if (!isNaN(e.length)) { var o = -1, i = function next() { for (; ++o < e.length;) if (n.call(e, o)) return next.value = e[o], next.done = !1, next; return next.value = t, next.done = !0, next; }; return i.next = i; } } throw new TypeError(_typeof(e) + \" is not iterable\"); } return GeneratorFunction.prototype = GeneratorFunctionPrototype, o(g, \"constructor\", { value: GeneratorFunctionPrototype, configurable: !0 }), o(GeneratorFunctionPrototype, \"constructor\", { value: GeneratorFunction, configurable: !0 }), GeneratorFunction.displayName = define(GeneratorFunctionPrototype, u, \"GeneratorFunction\"), e.isGeneratorFunction = function (t) { var e = \"function\" == typeof t && t.constructor; return !!e && (e === GeneratorFunction || \"GeneratorFunction\" === (e.displayName || e.name)); }, e.mark = function (t) { return Object.setPrototypeOf ? Object.setPrototypeOf(t, GeneratorFunctionPrototype) : (t.__proto__ = GeneratorFunctionPrototype, define(t, u, \"GeneratorFunction\")), t.prototype = Object.create(g), t; }, e.awrap = function (t) { return { __await: t }; }, defineIteratorMethods(AsyncIterator.prototype), define(AsyncIterator.prototype, c, function () { return this; }), e.AsyncIterator = AsyncIterator, e.async = function (t, r, n, o, i) { void 0 === i && (i = Promise); var a = new AsyncIterator(wrap(t, r, n, o), i); return e.isGeneratorFunction(r) ? a : a.next().then(function (t) { return t.done ? t.value : a.next(); }); }, defineIteratorMethods(g), define(g, u, \"Generator\"), define(g, a, function () { return this; }), define(g, \"toString\", function () { return \"[object Generator]\"; }), e.keys = function (t) { var e = Object(t), r = []; for (var n in e) r.push(n); return r.reverse(), function next() { for (; r.length;) { var t = r.pop(); if (t in e) return next.value = t, next.done = !1, next; } return next.done = !0, next; }; }, e.values = values, Context.prototype = { constructor: Context, reset: function reset(e) { if (this.prev = 0, this.next = 0, this.sent = this._sent = t, this.done = !1, this.delegate = null, this.method = \"next\", this.arg = t, this.tryEntries.forEach(resetTryEntry), !e) for (var r in this) \"t\" === r.charAt(0) && n.call(this, r) && !isNaN(+r.slice(1)) && (this[r] = t); }, stop: function stop() { this.done = !0; var t = this.tryEntries[0].completion; if (\"throw\" === t.type) throw t.arg; return this.rval; }, dispatchException: function dispatchException(e) { if (this.done) throw e; var r = this; function handle(n, o) { return a.type = \"throw\", a.arg = e, r.next = n, o && (r.method = \"next\", r.arg = t), !!o; } for (var o = this.tryEntries.length - 1; o >= 0; --o) { var i = this.tryEntries[o], a = i.completion; if (\"root\" === i.tryLoc) return handle(\"end\"); if (i.tryLoc <= this.prev) { var c = n.call(i, \"catchLoc\"), u = n.call(i, \"finallyLoc\"); if (c && u) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } else if (c) { if (this.prev < i.catchLoc) return handle(i.catchLoc, !0); } else { if (!u) throw new Error(\"try statement without catch or finally\"); if (this.prev < i.finallyLoc) return handle(i.finallyLoc); } } } }, abrupt: function abrupt(t, e) { for (var r = this.tryEntries.length - 1; r >= 0; --r) { var o = this.tryEntries[r]; if (o.tryLoc <= this.prev && n.call(o, \"finallyLoc\") && this.prev < o.finallyLoc) { var i = o; break; } } i && (\"break\" === t || \"continue\" === t) && i.tryLoc <= e && e <= i.finallyLoc && (i = null); var a = i ? i.completion : {}; return a.type = t, a.arg = e, i ? (this.method = \"next\", this.next = i.finallyLoc, y) : this.complete(a); }, complete: function complete(t, e) { if (\"throw\" === t.type) throw t.arg; return \"break\" === t.type || \"continue\" === t.type ? this.next = t.arg : \"return\" === t.type ? (this.rval = this.arg = t.arg, this.method = \"return\", this.next = \"end\") : \"normal\" === t.type && e && (this.next = e), y; }, finish: function finish(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.finallyLoc === t) return this.complete(r.completion, r.afterLoc), resetTryEntry(r), y; } }, \"catch\": function _catch(t) { for (var e = this.tryEntries.length - 1; e >= 0; --e) { var r = this.tryEntries[e]; if (r.tryLoc === t) { var n = r.completion; if (\"throw\" === n.type) { var o = n.arg; resetTryEntry(r); } return o; } } throw new Error(\"illegal catch attempt\"); }, delegateYield: function delegateYield(e, r, n) { return this.delegate = { iterator: values(e), resultName: r, nextLoc: n }, \"next\" === this.method && (this.arg = t), y; } }, e; }\nfunction _typeof(o) { \"@babel/helpers - typeof\"; return _typeof = \"function\" == typeof Symbol && \"symbol\" == typeof Symbol.iterator ? function (o) { return typeof o; } : function (o) { return o && \"function\" == typeof Symbol && o.constructor === Symbol && o !== Symbol.prototype ? \"symbol\" : typeof o; }, _typeof(o); }\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\nfunction _defineProperty(obj, key, value) { key = _toPropertyKey(key); if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\nfunction _toPropertyKey(t) { var i = _toPrimitive(t, \"string\"); return \"symbol\" == _typeof(i) ? i : String(i); }\nfunction _toPrimitive(t, r) { if (\"object\" != _typeof(t) || !t) return t; var e = t[Symbol.toPrimitive]; if (void 0 !== e) { var i = e.call(t, r || \"default\"); if (\"object\" != _typeof(i)) return i; throw new TypeError(\"@@toPrimitive must return a primitive value.\"); } return (\"string\" === r ? String : Number)(t); }\n//import firebase from 'firebase/app';\n//import 'firebase/firestore'; \nvar activeTabs = {}; // Store the list of activated tabs\nvar isTrackingActive = false; // Initial state for tracking\nvar timeSpent = 0;\n// let activeTabCount = 0;\nvar activeTabCounts = 0;\nvar visitedSites = {};\nvar blockedSites = [];\nvar firebaseConfig = {\n  apiKey: \"AIzaSyCjAqJTFNW9uzJENrjpg_7DuBsPD_3xEpM\",\n  authDomain: \"react-chrome-site.firebaseapp.com\",\n  databaseURL: \"https://react-chrome-site-default-rtdb.firebaseio.com\",\n  projectId: \"react-chrome-site\",\n  storageBucket: \"react-chrome-site.appspot.com\",\n  messagingSenderId: \"220152147383\",\n  appId: \"1:220152147383:web:c1e662e8b81bcccfab8c32\",\n  measurementId: \"G-G80V9YNN2Q\"\n};\nfirebase.initializeApp(firebaseConfig);\nchrome.runtime.onMessage.addListener(function (request, sender, sendResponse) {\n  if (request.action === \"Toggle\") {\n    isTrackingActive = request.isTracking;\n    sendResponse({\n      status: \"Tracking status updated to \" + isTrackingActive\n    });\n    updateContextMenu(tabId);\n  } else if (request.action === \"requestData\") {\n    updateTabStatus();\n    chrome.tabs.query({}, function (tabs) {\n      var openTabsCount = tabs.length;\n      var timeSpentInSeconds = timeSpent / 1000;\n      sendResponse({\n        timeSpent: timeSpentInSeconds,\n        openTabs: openTabsCount\n      });\n      chrome.browserAction.setBadgeText({\n        text: openTabsCount.toString()\n      });\n      chrome.browserAction.setBadgeBackgroundColor({\n        color: [255, 0, 0, 255]\n      }); // Change color to force refresh\n      chrome.browserAction.setBadgeBackgroundColor({\n        color: [0, 0, 0, 0]\n      }); // Set back to transparent\n\n      chrome.tabs.query({}, function (tabs) {\n        var openTabsCount = tabs.length;\n        var timeSpentInSeconds = timeSpent / 1000;\n        sendResponse({\n          timeSpent: timeSpentInSeconds,\n          openTabs: openTabsCount\n        });\n      });\n      return true;\n    });\n  }\n  ;\n});\n//on created updates the badge text.\nchrome.tabs.onCreated.addListener(updateBadgeText);\nchrome.tabs.onRemoved.addListener(updateBadgeText);\n\n//this is function is used for the count on the number of tabs\nfunction updateBadgeText() {\n  chrome.tabs.query({}, function (tabs) {\n    var openTabsCount = tabs.length;\n    chrome.browserAction.setBadgeText({\n      text: openTabsCount.toString()\n    });\n  });\n}\nfunction updateTabStatus() {\n  var currentTime = Date.now();\n  for (var _tabId in activeTabs) {\n    var lastActivatedTime = activeTabs[_tabId];\n    var inactiveTime = currentTime - lastActivatedTime;\n    if (inactiveTime >= 120000) {//120000 miliseconds\n      // Suspend tabs that haven't been used for 2 minutes\n      // chrome.tabs.discard(tabId, function (discardedTab) {\n      //     const newTitle = \"Paused: \" + discardedTab.title;\n      //     chrome.tabs.update(tabId, { title: newTitle });\n      // });\n    }\n  }\n}\n//used to log the each individual tab time so we can store all \n//urls or tabId's with a unique time attached.\nfunction logTime(tabId) {\n  chrome.tabs.get(tabId, function (tab) {\n    if (!tab || !tab.url) return;\n    var domainName = getDomainFromURL(tab.url);\n    var identifier = \"Domain-\" + domainName + \"-Time\";\n    if (activeTabs[tabId]) {\n      var tabTimeSpent = Date.now() - activeTabs[tabId];\n      timeSpent += tabTimeSpent;\n      chrome.storage.local.get([identifier], function (result) {\n        var totalTime = result[identifier] ? result[identifier] + tabTimeSpent : tabTimeSpent;\n        chrome.storage.local.set(_defineProperty({}, identifier, totalTime));\n      });\n      delete activeTabs[tabId];\n    }\n  });\n}\nchrome.tabs.onCreated.addListener(function (tab) {\n  checkBlockedList(tab.url);\n});\n//used when switching it gets the activated tab so \n//logTime is used as long as a tab is activated.\n\nchrome.tabs.onActivated.addListener(function (activeInfo) {\n  if (!isTrackingActive) return;\n  Object.keys(activeTabs).forEach(function (tabId) {\n    if (parseInt(tabId) !== activeInfo.tabId) {\n      logTime(parseInt(tabId));\n    }\n  });\n  updateTabStatus();\n  activeTabs[activeInfo.tabId] = Date.now();\n  updateContextMenu(activeInfo.tabId);\n});\n//used when adding new tabs or updating state of a tab\n//s.a refreshing, creating new tab\nchrome.tabs.onUpdated.addListener(function (tabId, changeInfo, tab) {\n  var domain = getDomainFromURL(tab.url);\n  if (!isTrackingActive) return;\n  updateTabStatus();\n  if (changeInfo.url) {\n    activeTabs[tabId] = Date.now();\n  }\n  if (changeInfo.title) {\n    var identifier = \"Tab-\" + tabId + \"-Title\";\n    var titleTimeSpent = Date.now() - activeTabs[tabId];\n    chrome.storage.local.get([identifier], function (result) {\n      var totalTime = result[identifier] ? result[identifier] + titleTimeSpent : titleTimeSpent;\n      chrome.storage.local.set(_defineProperty({}, identifier, totalTime));\n    });\n  }\n  if (blockedSites.includes(domain)) {\n    checkBlockedList(tab.url);\n  }\n  if (changeInfo.status === 'complete') {\n    updateContextMenu(tabId);\n  }\n});\nchrome.tabs.onRemoved.addListener(function (tabId) {\n  if (!isTrackingActive) return;\n  logTime(tabId);\n  updateTabStatus();\n\n  //alert(\"onRemoved Test\")\n});\n//function clears data from local storage\n//probably will be used when clearing user data.\nfunction removeData(key) {\n  chrome.storage.local.remove(key, function () {\n    console.log('Data removed for key:', key);\n  });\n}\n//these two functions will be used to generate\n//data in account.html.\n//saving data to chrome local storage for later use\nfunction saveData(key, data) {\n  var obj = {};\n  obj[key] = data;\n  chrome.storage.local.set(obj, function () {\n    console.log('Data saved for key:', key);\n  });\n}\n//load data is in fact not going to be used currently.\nfunction loadData(key, callback) {\n  chrome.storage.local.get([key], function (result) {\n    if (result[key]) {\n      console.log('Data loaded for key:', key);\n      callback(result[key]);\n    } else {\n      console.log('No data found for key:', key);\n    }\n  });\n}\nfunction getDomainFromURL(url) {\n  var urlObj = new URL(url);\n  return urlObj.hostname.replace('www.', '');\n}\nfunction addToBlockList(url) {\n  var domainName = getDomainFromURL(url);\n  chrome.storage.local.get({\n    blockedSites: []\n  }, function (result) {\n    var blockedSites = result.blockedSites;\n    if (!blockedSites.includes(domainName)) {\n      blockedSites.push(domainName);\n      chrome.storage.local.set({\n        blockedSites: blockedSites\n      }, function () {\n        console.log(domainName + \" added to the block list\");\n        chrome.tabs.query({\n          active: true,\n          currentWindow: true\n        }, function (tabs) {\n          if (tabs[0]) {\n            chrome.tabs.reload(tabs[0].id);\n          }\n        });\n      });\n    } else {\n      console.log(domainName + \" is already in the block list\");\n    }\n  });\n  chrome.tabs.query({\n    active: true,\n    currentWindow: true\n  }, function (tabs) {\n    if (tabs[0]) {\n      updateContextMenu(tabs[0].id);\n    }\n  });\n}\nfunction RemoveFromBlockList(url) {\n  var domainName = getDomainFromURL(url);\n  chrome.storage.local.get({\n    blockedSites: []\n  }, function (result) {\n    var blockedSites = result.blockedSites;\n    var index = blockedSites.indexOf(domainName);\n    if (index > -1) {\n      blockedSites.splice(index, 1);\n      chrome.storage.local.set({\n        blockedSites: blockedSites\n      }, function () {\n        console.log(domainName + \" Removed from the block list\");\n        chrome.tabs.query({\n          active: true,\n          currentWindow: true\n        }, function (tabs) {\n          if (tabs[0]) {\n            chrome.tabs.reload(tabs[0].id);\n          }\n        });\n      });\n    }\n  });\n  chrome.tabs.query({\n    active: true,\n    currentWindow: true\n  }, function (tabs) {\n    if (tabs[0]) {\n      updateContextMenu(tabs[0].id);\n    }\n  });\n}\nchrome.runtime.onInstalled.addListener(function () {\n  chrome.contextMenus.create({\n    title: \"Check Site Status\",\n    // Default title\n    contexts: [\"all\"],\n    id: \"toggleBlockWebsite\"\n  });\n});\nchrome.runtime.onStartup.addListener(function () {\n  chrome.contextMenus.create({\n    title: \"Check Site Status\",\n    // Default title\n    contexts: [\"all\"],\n    id: \"toggleBlockWebsite\"\n  });\n});\nfunction updateContextMenu(tabId) {\n  chrome.tabs.get(tabId, function (tab) {\n    if (!tab || !tab.url || tab.url.startsWith('chrome://')) return;\n    var domainName = getDomainFromURL(tab.url);\n    chrome.storage.local.get({\n      blockedSites: []\n    }, function (result) {\n      var blockedSites = result.blockedSites;\n      var isBlocked = blockedSites.includes(domainName);\n\n      // Update the context menu item\n      chrome.contextMenus.update(\"toggleBlockWebsite\", {\n        title: isBlocked ? \"Remove from Block List\" : \"Add to Block List\",\n        onclick: isBlocked ? function () {\n          return RemoveFromBlockList(tab.url);\n        } : function () {\n          return addToBlockList(tab.url);\n        }\n      });\n    });\n  });\n}\nfunction initializeExtensionState() {\n  return _initializeExtensionState.apply(this, arguments);\n}\nfunction _initializeExtensionState() {\n  _initializeExtensionState = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var result;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return chrome.storage.local.get({\n            blockedSites: []\n          });\n        case 2:\n          result = _context.sent;\n          blockedSites = result.blockedSites;\n        case 4:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee);\n  }));\n  return _initializeExtensionState.apply(this, arguments);\n}\ninitializeExtensionState();\nchrome.contextMenus.onClicked.addListener(function (info, tab) {\n  if (info.menuItemId === \"toggleBlockWebsite\") {\n    var domainName = getDomainFromURL(tab.url);\n    chrome.storage.local.get({\n      blockedSites: []\n    }, function (result) {\n      var blockedSites = result.blockedSites;\n      if (blockedSites.includes(domainName)) {\n        RemoveFromBlockList(tab.url); // Unblock the site\n      } else {\n        addToBlockList(tab.url); // Block the site\n      }\n    });\n  }\n});\n\n//this is where we load the blocked sites from local storage\nchrome.storage.local.get({\n  blockedSites: []\n}, function (result) {\n  blockedSites = result.blockedSites;\n\n  // Call the function to check the blocked list when the data is loaded\n  chrome.tabs.onUpdated.addListener(function (tabId, changeInfo, tab) {\n    if (!isTrackingActive) return;\n    updateTabStatus();\n    if (changeInfo.title) {\n      var identifier = \"Tab-\" + tabId + \"-Title\";\n      var titleTimeSpent = Date.now() - activeTabs[tabId];\n      chrome.storage.local.get([identifier], function (result) {\n        var totalTime = result[identifier] ? result[identifier] + titleTimeSpent : titleTimeSpent;\n        chrome.storage.local.set(_defineProperty({}, identifier, totalTime));\n      });\n    }\n    checkBlockedList(tab.url, tabId);\n  });\n});\nfunction checkBlockedList(url, tabId) {\n  var domain = getDomainFromURL(url);\n  chrome.storage.local.get({\n    blockedSites: []\n  }, function (result) {\n    var blockedSites = result.blockedSites;\n    if (blockedSites.includes(domain)) {\n      chrome.tabs.query({\n        active: true,\n        currentWindow: true\n      }, function (tabs) {\n        var currentTabId = tabs[0].id;\n        if (currentTabId === tabId) {\n          // If the blocked site is the current tab, inject content script to display a message\n          chrome.tabs.executeScript(currentTabId, {\n            code: \"document.body.innerHTML = '<h1 style=\\\"color: red; text-align: center; margin-top: 20%;\\\">This website is blocked.</h1>';\"\n          });\n        } else {\n          chrome.tabs.remove(tabId);\n        }\n      });\n    }\n  });\n}\n\n//# sourceURL=webpack://react-chrome-extension-main-3/./background.js?");

/***/ })

/******/ 	});
/************************************************************************/
/******/ 	
/******/ 	// startup
/******/ 	// Load entry module and return exports
/******/ 	// This entry module can't be inlined because the eval devtool is used.
/******/ 	var __webpack_exports__ = {};
/******/ 	__webpack_modules__["./background.js"]();
/******/ 	
/******/ })()
;